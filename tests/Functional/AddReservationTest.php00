<?php

namespace App\Tests\Functional;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

class AddReservationTest extends WebTestCase
{
    public function testCreateReservationSuccess()
    {
        $client = static::createClient();
        $crawler = $client->request('POST', '/reservations', [], [], ['CONTENT_TYPE' => 'application/json'], json_encode([
            'serviceId' => '1',  // Asegúrate de que este ID exista en la base de datos de prueba o de que sea creado por un seeder.
            'clientName' => 'John Doe',
            'clientEmail' => 'john.doe@example.com',
            'serviceDay' => '2024-01-01',
            'serviceTime' => '10:00:00'
        ]));

        $this->assertResponseIsSuccessful();
        $this->assertJson($client->getResponse()->getContent());
        $responseData = json_decode($client->getResponse()->getContent(), true);
        $this->assertTrue($responseData['success']);
        $this->assertEquals('Reservation created successfully.', $responseData['message']);
    }

    public function testCreateReservationFailure()
    {
        $client = static::createClient();
        $crawler = $client->request('POST', '/reservations', [], [], ['CONTENT_TYPE' => 'application/json'], json_encode([
            'serviceId' => '1',
            'clientName' => 'John Doe',
            'clientEmail' => 'john.doe@example.com',
            'serviceDay' => '2024-01-01',
            'serviceTime' => '10:00:00'  // Asumir que este tiempo ya está reservado para demostrar el fallo.
        ]));

        $this->assertResponseStatusCodeSame(409); // O el código que manejes para conflictos o recursos no disponibles
        $this->assertJson($client->getResponse()->getContent());
        $responseData = json_decode($client->getResponse()->getContent(), true);
        $this->assertFalse($responseData['success']);
        $this->assertEquals('Service not available at the requested time.', $responseData['message']);
    }
}
