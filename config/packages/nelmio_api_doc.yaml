nelmio_api_doc:
    documentation:
        info:
            title: Symfony API Spa Reservations
            description: Symfony hexagonal api booking reservations
            version: 1.0.0
        paths:
            /api/register:
                post:
                    description: User registration
                    tags:
                        - User
                    requestBody:
                        content:
                            application/json:
                                schema:
                                    allOf:
                                       - $ref: '#/components/schemas/RegisterAuthUserRequest'
                                       - required:
                                         - email
                                         - password
                                         - passwordConfirmation
                    responses:
                        '200':
                            description: Registration success
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/RegisterOrLoginAuthUserResponse'
                        '409':
                            description: Registration failed - email already in use
                            content:
                                application/json:
                                    schema:
                                        type: object
                                        properties:
                                            message: { type: string, example: 'Validation failed.' }
                                            errors: { type: array, items: { type: object, example: {
                                                property: 'email',
                                                error: 'Email already in use',
                                                context: 'User'
                                                }}
                                            },
                                            code: { type: integer, example: 409 }
                        '400':
                            description: Registration request error - mandatory parameters missing
                            content:
                                application/json:
                                    schema:
                                        type: object
                                        properties:
                                            message: { type: string, example: 'Mandatory key password is missing' },
                                            code: { type: integer, example: 0 }
            
            /api/login:
                post:
                    description: User login
                    tags:
                        - User
                    requestBody:
                        content:
                            application/json:
                                schema:
                                    allOf:
                                        - $ref: '#/components/schemas/LoginAuthUserRequest'
                                        - required:
                                             - email
                                             - password
                    responses:
                        '200':
                            description: Login success
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/RegisterOrLoginAuthUserResponse'
                        '401':
                            description: Invalid credentials
                            content:
                                application/json:
                                    schema:
                                        type: object
                                        properties:
                                            message: { type: string, example: 'Invalid credentials' },
                                            code: { type: integer, example: 0 }
                        '400':
                            description: Login request error - mandatory parameters missing
                            content:
                                application/json:
                                    schema:
                                        type: object
                                        properties:
                                            message: { type: string, example: 'Mandatory key password is missing' },
                                            code: { type: integer, example: 0 }

            /api/account/logout/{tokenId}:
                delete:
                    security:
                        - bearerAuth: []
                    description: Logout from a given device
                    requestBody:
                        application/json:
                    responses:
                        '200':
                            description: Logout success
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/LogoutAuthUserResponse'
                        '401':
                            description: Unauthorized
                    tags:
                        - User
                    parameters:
                        - in: path
                          name: tokenId
                          schema:
                            type: string
                          required: true
                          description: Auth token ID

            /api/account/me/sign-out:
                 post:
                     security:
                         - bearerAuth: []
                     description: Logout from all devices (sign out)
                     tags:
                         - User
                     requestBody:
                         content:
                             application/json:
                     responses:
                         '200':
                             description: Sign out success
                             content:
                                 application/json:
                                     schema:
                                         $ref: '#/components/schemas/LogoutAuthUserResponse'
                         '401':
                             description: Unauthorized
            /api/account/me/update:
                patch:
                    security:
                        - bearerAuth: []
                    description: Update user name
                    tags:
                        - User
                    requestBody:
                        content:
                            application/json:
                                schema:
                                    $ref: '#/components/schemas/UpdateUserRequest'
                    responses:
                        '200':
                            description: Sign out success
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/UserResponse'
                        '401':
                            description: Unauthorized
            /api/account/me/change-password:
                patch:
                    security:
                        - bearerAuth: []
                    description: Update user name
                    tags:
                        - User
                    requestBody:
                        content:
                            application/json:
                                schema:
                                    allOf:
                                        - $ref: '#/components/schemas/ChangePasswordRequest'
                                        - required:
                                             - currentPassword
                                             - password
                                             - passwordConfirmation
                    responses:
                        '200':
                            description: Password changed successfully
                            content:
                                application/json:
                                    schema:
                                        $ref: '#/components/schemas/UserResponse'
                        '403':
                            description: Forbidden - wrong current password
                            content:
                                application/json:
                                    schema:
                                        type: object
                                        properties:
                                            message: { type: string, example: 'Invalid credentials' },
                                            code: { type: integer, example: 0 }
                        '400':
                            description: Bad request - passwords do not match or missing required parameters
                            content:
                                application/json:
                                    schema:
                                        type: object
                                        properties:
                                            message: { type: string, example: 'Passwords do not match' },
                                            code: { type: integer, example: 0 }
            /api/account/me/delete-account:
                post:
                    security:
                        - bearerAuth: []
                    description: Delete user account
                    tags:
                        - User
                    requestBody:
                        content:
                            application/json:
                                schema:
                                    allOf:
                                        - $ref: '#/components/schemas/DeleteAccountRequest'
                                        - required:
                                             - password
                    responses:
                        '200':
                            description: Account deleted successfully
                            content:
                                application/json:
                                    schema:
                                        type: object
                                        properties:
                                            message: { type: string, example: 'User account deleted successfully' }
                        '401':
                            description: Unauthorized
                        '403':
                            description: Forbidden - wrong password
                            content:
                                application/json:
                                    schema:
                                        type: object
                                        properties:
                                            message: { type: string, example: 'Invalid password' }
                                            code: { type: integer, example: 0 }
                        '400':
                            description: 'Bad request - missing password'
                            content:
                                application/json:
                                    schema:
                                        type: object
                                        properties:
                                            message: { type: string, example: 'Request content is empty or not valid' }
                                            code: { type: integer, example: 0 }

            /api/:
                get:
                    description: Welcome page
                    tags:
                        - Reservations
                    requestBody:
                        application/json
                    responses:
                        '200':
                            description: Success
                            content:
                                application/json:
                                    schema:
                                        type: object
                                        properties:
                                            message: { type: string, example: 'Welcome to the homepage.' }

            /api/dashboard:
                get:
                    security:
                        - bearerAuth: []
                    description: Dashboard
                    requestBody:
                        application/json
                    responses:
                        '200':
                            description: Success
                            content:
                                application/json:
                                    schema:
                                        type: object
                                        properties:
                                            data: { type: object, example: {
                                                message: 'Welcome to dashboard. You are logged in.'
                                                }}
                                            user:
                                                type: object
                                                $ref: '#/components/schemas/UserResponse'
                        '401':
                            description: Not authorized
                            content:
                                application/json:
                                    schema:
                                        type: object
                                        properties:
                                            title: { type: string, example: 'An error occurred' },
                                            status: { type: integer, example: 401 },
                                            detail: { type: string, example: 'Full authentication is required to access this resource.' }',

        tags:
            - name: User
        components:
            schemas:
                RegisterAuthUserRequest:
                    type: object
                    properties:
                        email: { type: string, example: 'test@example.com' }
                        password: { type: string, example: 'password' }
                        passwordConfirmation: { type: string, example: 'password' }
                        firstName: { type: string, example: 'John' }
                        lastName: { type: string, example: 'Doe' }
                        deviceName: { type: string, example: 'iPhone 15' }
                LoginAuthUserRequest:
                    type: object
                    properties:
                        email: { type: string, example: 'test@example.com' }
                        password: { type: string, example: 'password' }
                        deviceName: { type: string, example: 'iPhone 15' }
                UpdateUserRequest:
                    type: object
                    properties:
                        firstName: { type: string, example: 'John' }
                        lastName: { type: string, example: 'Doe' }
                ChangePasswordRequest:
                    type: object
                    properties:
                        currentPassword: { type: string, example: 'password' }
                        password: { type: string, example: 'new-password' }
                        passwordConfirmation: { type: string, example: 'new-password' }
                DeleteAccountRequest:
                    type: object
                    properties:
                        password: { type: string, example: 'password' }
                RegisterOrLoginAuthUserResponse:
                    type: object
                    properties:
                        token: { type: string, example: 'ee66723b915904025c7465590cf1f2e385e2667be9c8b112ff5f515471b5f66e' }
                        user: { type: object, example: {
                                id: '018f2618-7f89-7437-a561-57ea5e5ad46a',
                                email: 'test@test.com',
                                firstName: 'John',
                                lastName: 'Doe',
                                roles: ['ROLE_USER'],
                                createdAt: '2024-04-28T19:04:50+00:00',
                                authTokens: [
                                    {
                                        id: '018f3338-015b-7507-92ca-742cb72ad379',
                                        name: 'iPhone 15',
                                        createdAt: '2024-05-01T08:14:19+00:00',
                                        lastUsedAt: '2024-05-01T08:14:19+00:00'
                                    }
                                ]
                            }
                        }
                LogoutAuthUserResponse:
                    type: object
                    properties:
                        token: { type: string, example: 'ee66723b915904025c7465590cf1f2e385e2667be9c8b112ff5f515471b5f66e' }
                        user: { type: object, example: {
                                id: '018f2618-7f89-7437-a561-57ea5e5ad46a',
                                email: 'test@test.com',
                                firstName: 'John',
                                lastName: 'Doe',
                                roles: ['ROLE_USER'],
                                createdAt: '2024-04-28T19:04:50+00:00',
                                authTokens: []
                            }
                        }
                UserResponse:
                    type: object
                    properties:
                        user: { type: object, example: {
                                id: '018f2618-7f89-7437-a561-57ea5e5ad46a',
                                email: 'test@test.com',
                                firstName: 'John',
                                lastName: 'Doe',
                                roles: ['ROLE_USER'],
                                createdAt: '2024-04-28T19:04:50+00:00',
                                authTokens: [
                                    {
                                        id: '018f3338-015b-7507-92ca-742cb72ad379',
                                        name: 'iPhone 15',
                                        createdAt: '2024-05-01T08:14:19+00:00',
                                        lastUsedAt: '2024-05-01T08:14:19+00:00'
                                    }
                                ]
                            }
                        }

            securitySchemes:
                bearerAuth:
                  type: http
                  scheme: bearer

    areas:
        path_patterns:
            - ^/api(?!/doc$) # Accepts routes under /api except /api/doc
